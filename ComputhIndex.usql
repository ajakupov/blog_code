DECLARE @dataVersion string = "mag-yyyy-mm-dd";
DECLARE @blobAccount string = "magascompanyname";
DECLARE @uriPrefix   string = "wasb://" + @dataVersion + "@" + @blobAccount + "/";
DECLARE @outAuthorHindex string = "/Output/AuthorHIndex.tsv";

@Affiliations = Affiliations(@uriPrefix);
@Authors = Authors(@uriPrefix);
@Papers = Papers(@uriPrefix);
@PaperAuthorAffiliations = PaperAuthorAffiliations(@uriPrefix);

// Get Affiliations
@Affiliations =
    SELECT
        (long?)AffiliationId AS AffiliationId, // Change datatype join with PaperAuthorAffiliations later
        DisplayName
    FROM @Affiliations;

// Get Authors
@Authors =
    SELECT
        AuthorId,
        DisplayName,
        LastKnownAffiliationId,
        PaperCount
    FROM @Authors;

// Get (Author, Paper) pairs
@AuthorPaper =
    SELECT DISTINCT
        AuthorId,
        PaperId
    FROM @PaperAuthorAffiliations;

// Get (Paper, EstimatedCitation).
// Treat papers with same FamilyId as a single paper and sum the EstimatedCitation
@PaperCitation =
    SELECT
        (long)(FamilyId == null ? PaperId : FamilyId) AS PaperId,
        EstimatedCitation
    FROM @Papers
    WHERE EstimatedCitation > 0;

@PaperCitation =
    SELECT
        PaperId,
        SUM(EstimatedCitation) AS EstimatedCitation
    FROM @PaperCitation
    GROUP BY PaperId;

// Generate author, paper, citation view
@AuthorPaperCitation =
    SELECT
        A.AuthorId,
        A.PaperId,
        P.EstimatedCitation
    FROM @AuthorPaper AS A
    INNER JOIN @PaperCitation AS P
        ON A.PaperId == P.PaperId;

// Order author, paper by citation
@AuthorPaperOrderByCitation =
    SELECT
        AuthorId,
        PaperId,
        EstimatedCitation,
        ROW_NUMBER() OVER(PARTITION BY AuthorId ORDER BY EstimatedCitation DESC) AS Rank
    FROM @AuthorPaperCitation;

// Generate author hindex
@AuthorHIndexTemp =
    SELECT
        AuthorId,
        SUM(EstimatedCitation) AS TotalEstimatedCitation,
        MAX(CASE WHEN EstimatedCitation >= Rank THEN Rank ELSE 0 END) AS HIndex
    FROM @AuthorPaperOrderByCitation 
    GROUP BY AuthorId;

// Get author detail information
@AuthorHIndex =
    SELECT
        I.AuthorId,
        A.DisplayName,
        F.DisplayName AS AffiliationDisplayName,
        A.PaperCount,
        I.TotalEstimatedCitation,
        I.HIndex
    FROM @AuthorHIndexTemp AS I
    INNER JOIN @Authors AS A
        ON A.AuthorId == I.AuthorId
    LEFT OUTER JOIN @Affiliations AS F
        ON A.LastKnownAffiliationId == F.AffiliationId;

OUTPUT @AuthorHIndex
TO @outAuthorHindex
ORDER BY HIndex DESC, AuthorId
FETCH 100 ROWS
USING Outputters.Tsv(quoting : false);
